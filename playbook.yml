---
# =============================================================================
# PLAYBOOK: Configuração Automatizada de Ambiente WSL2 Ubuntu
# =============================================================================
# Descrição:
#   Este playbook realiza a configuração automatizada de um ambiente de 
#   desenvolvimento profissional no WSL2 Ubuntu, implementando ferramentas
#   essenciais para DevOps e Cloud Computing.
#
# Funcionalidades:
#   - Configuração do sistema base
#   - Instalação e configuração do ZSH com Oh-My-ZSH
#   - Setup completo do Docker e permissões
#   - Instalação das principais CLIs de cloud (AWS, Azure, GCP)
#
# Autor: Ihan Messias Nascimento dos Santos
# Email: messias.devops@gmail.com
# Linkedin: https://www.linkedin.com/in/ihanmessias/
# Instagram: https://www.instagram.com/messias.code/
# Github: https://github.com/messias-code
# =============================================================================

- name: PLAYBOOK WORKSTATION-SETUP-WSL2
  hosts: localhost
  tasks:
    # =============================================================================
    # SEÇÃO 1: CONFIGURAÇÃO DO SISTEMA BASE
    # =============================================================================
    
    - name: Atualização do Sistema
      become: true
      ansible.builtin.apt:
        update_cache: yes
        upgrade: yes

    - name: Instalação de Pacotes Base
      become: true
      ansible.builtin.apt:
        name: '{{ item }}'
        install_recommends: yes
        state: present
      loop:
        - git
        - curl
        - wget
        - neovim
        - zsh
        - texlive
        - texlive-latex-extra
        - texlive-xetex
        - pandoc
        - dconf-cli
        - python3-pip

    # =============================================================================
    # SEÇÃO 2: ZSH e Oh-My-ZSH
    # =============================================================================
    
    - name: Verificar instalação Oh-My-ZSH
      ansible.builtin.stat:
        path: "/home/{{ ansible_env.USER }}/.oh-my-zsh"
      register: ohmyzsh_check

    - name: Instalação Oh-My-ZSH
      ansible.builtin.shell:
        cmd: |
          # Instalação automatizada do Oh-My-ZSH
          # - 'yes |': Responde automaticamente todas as prompts
          # - 'sh -c': Executa comando em novo shell
          # - 'curl -fsSL': Download silencioso do script
          yes | sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      when: not ohmyzsh_check.stat.exists

    - name: Verificar Plugin ZSH Syntax Highlighting
      ansible.builtin.stat:
        path: "/home/{{ ansible_env.USER }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
      register: syntax_highlight_check

    - name: Instalação Plugin ZSH Syntax Highlighting
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: /home/{{ ansible_env.USER }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      when: not syntax_highlight_check.stat.exists

    - name: Verificar Tema Powerlevel10k
      ansible.builtin.stat:
        path: "/home/{{ ansible_env.USER }}/.oh-my-zsh/custom/themes/powerlevel10k"
      register: p10k_check

    - name: Instalação Tema Powerlevel10k
      ansible.builtin.git:
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: /home/{{ ansible_env.USER }}/.oh-my-zsh/custom/themes/powerlevel10k
      when: not p10k_check.stat.exists

    - name: Verificar Shell Atual
      ansible.builtin.shell: echo $SHELL
      register: current_shell
      changed_when: false

    - name: Configuração Shell Padrão
      become: true
      user:
        name: '{{ ansible_env.USER }}'
        shell: /bin/zsh
      when: current_shell.stdout != '/bin/zsh'

    - name: Configuração Tema ZSH
      lineinfile:
        path: /home/{{ ansible_env.USER }}/.zshrc
        regexp: '^ZSH_THEME='
        line: 'ZSH_THEME="powerlevel10k/powerlevel10k"'

    - name: Configuração Plugins ZSH
      lineinfile:
        path: /home/{{ ansible_env.USER }}/.zshrc
        regexp: '^plugins='
        line: 'plugins=(git zsh-syntax-highlighting)'

    # =============================================================================
    # SEÇÃO 3: Docker Engine e Docker Compose
    # =============================================================================

    - name: Verificação Chave Docker
      stat:
        path: /etc/apt/keyrings/docker.asc
      register: docker_key

    - name: Criação Diretório Docker
      become: true
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: not docker_key.stat.exists

    - name: Instalação Chave Docker
      become: true
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg
      when: not docker_key.stat.exists

    - name: Verificação Repositório Docker
      stat:
        path: /etc/apt/sources.list.d/docker.list
      register: docker_repo

    - name: Configuração Repositório Docker
      become: true
      ansible.builtin.apt_repository:
        repo: 'deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable'
        state: present
        filename: docker
      when: not docker_repo.stat.exists

    - name: Instalação Docker
      become: true
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: Criação Grupo Docker
      become: true
      ansible.builtin.group:
        name: docker
        state: present

    - name: Configuração Permissões Docker
      become: true
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes

    # =============================================================================
    # SEÇÃO 4: Cloud CLI Tools
    # =============================================================================
    
    # ======== SEÇÃO 4.1: Microsoft Azure CLI ======== #
    - name: Verificar instalação Azure CLI
      ansible.builtin.stat:
        path: /usr/bin/az
      register: az_cli_check

    - name: Instalação Azure CLI
      become: true
      ansible.builtin.shell: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | bash
      when: not az_cli_check.stat.exists

    # ======== SEÇÃO 4.2: Amazon Web Services CLI ======== #
    - name: Verificar instalação AWS CLI
      ansible.builtin.stat:
        path: /usr/local/bin/aws
      register: aws_cli_check

    - name: Download AWS CLI
      become: true
      ansible.builtin.get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"
        mode: '0644'
      when: not aws_cli_check.stat.exists

    - name: Descompactar AWS CLI
      become: true
      ansible.builtin.unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp"
        remote_src: yes
      args:
        creates: /tmp/aws
      when: not aws_cli_check.stat.exists

    - name: Instalar AWS CLI
      become: true
      ansible.builtin.command:
        cmd: "/tmp/aws/install"
      when: not aws_cli_check.stat.exists

    # ======== SEÇÃO 4.3: Google Cloud Platform CLI ======== #
    - name: Verificar instalação Google Cloud CLI
      ansible.builtin.stat:
        path: /usr/bin/gcloud
      register: gcloud_cli_check

    - name: Adicionar chave GPG do Google Cloud
      become: true
      ansible.builtin.shell: |
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
      args:
        creates: /usr/share/keyrings/cloud.google.gpg

    - name: Adicionar repositório Google Cloud
      become: true
      ansible.builtin.shell: |
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
      args:
        creates: /etc/apt/sources.list.d/google-cloud-sdk.list

    - name: Atualizar cache do APT
      become: true
      ansible.builtin.apt:
        update_cache: yes

    - name: Instalar Google Cloud CLI
      become: true
      ansible.builtin.apt:
        name: google-cloud-sdk
        state: present
      when: not gcloud_cli_check.stat.exists
...